/* 2-d layouts vs 1-d flexbox layout
grid is best for overall layout of a webpage, flexbox is better to align inner elements of grid items */
* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}
body{
    font-size: 16px;
    line-height: 1.5;
    color: black;
    background-color: blueviolet;
}
.container{
    max-width: 960px;
    margin: 100px auto;
    padding: 10px;
    display: grid;
    /*grid template columns*/
    /* grid-template-columns: repeat(3, 1fr); */
    /*if we go below 200px, the items wrap, since we set to autofill, it'll take up whatever space, if small space, 2 columns, a lot of space, 4 columns, etc.*/
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    /*
    column-gap: 10px;
    row-gap: 10px;
    -or */
    gap: 10px;
    /* takes in a min and max*/
    /* grid-auto-rows: minmax(200px, auto); */
    /* grid-template-rows: repeat(3, 1fr); */
}
.item{
    background-color: skyblue;
    color: white;
    font-size: 20px;
    padding: 20px;
    border: steelblue 2px solid;
    /*this is what i'm always looking for to align text horizontally in a div*/
    align-items: center;
}
/* how would i grab the 2nd item? with pseudocode since there's no ids on the divs, they all have the same class*/
/* .item:nth-of-type(2){ */
    /* background-color: pink;
}*/
/*
.item:nth-of-type(1){
    background-color: black;
    /*could say this*//*
    grid-column: 1/3;
    /*or also this, its the sam, we're telling it to span the length of 2 columns, so from 1-3*/
    /* grid-column: 1/span 2; *//*
}
.item:nth-of-type(3){
    background: black;
    grid-row: 2/4;
}
.item:nth-of-type(4){
    background: black;
    grid-row: 2/4;
}*/

/*when the screen is 500px or smaller, there's only 1 column, so all the items stack on top of one another
@media(max-width: 500px){
    .container{
        grid-template-columns: 1fr;
    }
}*/